三种添加方式
内部的JS <script>   </script>
外部的JS <script=src="script.js"></script>
基本不用  内联的JS <button onclick="createParagraph()"> click me </button>

在body下面写script

alert() 弹出一个框输出括号内的东西
console.log()
字符串的长度 字符串.length
字符串"3"+"4"=="34" 等价于"3"+4=="34"
但是3+4+"5"="75"
charAt() 知道第几个字符是啥
.replace(替代什么内容，替代物)
.toUpperCase()不用传入内容

boolean  操作符 === > >= < <= && ||  !
==和===进行比较：123==”123“ true 类型不一致但是比较的是数字的大小
                123===”123“ false 类型不一致
定义变量 var name ="DasAuto"（可更改）; 还有 let a= 1和const


const定义常量之后无法修改 修改了浏览器会报错
let 定义的是局部变量在定义其的函数外无法找到值

console.log(变量名)在console 下面输出

新建对象 var obj=new Object();
        var obj2={};
obj={
    name:"Simon",
    age:'20',
    contact:{
        phone:"123456789"
    }
}
访问元素obj.contact.phone  obj["contact"]["phone"]
增加元素 直接加 obj.contact.weixin="abcd";

数组var a=new Array();
a[0]="1";可以直接跳到第五个，中间空的为undefined empty 未定义
for(let i in a ) console.log(a[i])只会输出不为空的数组元素
.push（a）在数组末尾添加
.unshift(a)在数组头添加
.pop()删去结尾元素
.reverse()颠倒数组
.shift()删去第一个项

新建函数
 function 函数名(参数)
 {
}

arguments.length 识别有多少个参数   arguments[i]是指的第几个参数
return sum; 返回sum 的值

闭包
function add(a){
    return function(b){
        return a+b;
    }
}
var x=add(5);//此时x为一个函数
var sum=x(6); //sum值为11